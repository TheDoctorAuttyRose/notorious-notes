name: Release Application

on:
  push:
    branches:
      - master_old
jobs:
  release_management:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setting up Node
      uses: actions/setup-node@v1
      with:
        node-version: '10.15.1'
    - name: Preparing release
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npx standard-version -a --no-verify --prerelease alpha --skip.commit --skip.tag --skip.changelog
        echo ::set-env name=PACKAGE_VERSION::$(node -p -e "require('./package.json').version")
      env:
        CI: true
    - name: Push to master
      uses: ad-m/github-push-action@v0.5.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    # - name: Merge back to develop
    #   uses: ad-m/github-push-action@v0.5.0
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: develop

  build:
    if: success()
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2019] # macos-10.15, ubuntu-18.04,
    steps:
    - uses: actions/checkout@v1
    - name: Setting up Node
      uses: actions/setup-node@v1
      with:
        node-version: '10.15.1'

      env:
        CI: true
    - name: Get Release Version
      run: |
        echo ::set-env name=PACKAGE_VERSION::$(node -p -e "require('./package.json').version")
    - name: Build/release Electron app
      uses: samuelmeuli/action-electron-builder@v1
      with:
        # GitHub token, automatically provided to the action
        # (No need to define this secret in the repo settings)
        github_token: ${{ secrets.GITHUB_TOKEN }}

        # If the commit is tagged with a version (e.g. "v1.0.0"),
        # release the app after building
        release: ${{ startsWith(github.ref, 'refs/tags/v') }}
    - name: Cleanup artifacts
      run: |
        npx rimraf "dist/!(*.exe|*.deb|*.AppImage|*.dmg)"
    - name: Archive production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Linux
        path: release

    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}
        release_name: ${{ env.PACKAGE_VERSION }}
        draft: true
        prerelease: false
  docker_build:
    if: success()
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setting up Node
      uses: actions/setup-node@v1
      with:
        node-version: '10.15.1'
    - uses: mr-smithers-excellent/docker-build-push@v2
      with:
        image: danobot/notorious
        tag: ${{ env.PACKAGE_VERSION }}
        registry: hub.docker.com
        dockerfile: Dockerfile.prod
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Secure secrets management using GitHub Secrets
    - name: "[Secure Secrets Management] Configure GitHub Secrets"
      run: |
        echo "Configuring GitHub Secrets..."
        echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
        echo "DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}"

    # Network segmentation and least privilege access controls
    - name: "[Network Segmentation] Configure Docker network"
      run: |
        echo "Configuring Docker network..."
        docker network create --driver bridge isolated_network
        docker network connect isolated_network notorious_web
        docker network connect isolated_network couchdb

    # Continuous monitoring and logging using Prometheus and Grafana
    - name: "[Monitoring and Logging] Setup Prometheus and Grafana"
      run: |
        echo "Setting up Prometheus and Grafana..."
        docker run -d --name prometheus --network isolated_network prom/prometheus
        docker run -d --name grafana --network isolated_network grafana/grafana
