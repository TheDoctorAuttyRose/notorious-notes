name: Build

on:
  push:
#   pull_request:
    
# We need two jobs: First a build-job, running on a matrix
# to build all necessary releases, which also uploads all
# resulting assets to the workflow. And then, we download
# them onto a separate VM running the release-job to verify
# the checksums and create a draft release.
jobs:
  prepare_docs:
    # needs: [build] # Make sure (and wait until) the build has succeeded
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && false
    steps:
      - uses: actions/checkout@v2
      - run: |
          ls app
          rm -rf docs
          mkdir docs
      - name: JSDoc Action
        # You may pin to the exact commit or the version.
        # uses: andstor/jsdoc-action@2fb2b536605bdebace2b92abb0601155d5ddc688
        uses: andstor/jsdoc-action@v1.2.0
        with:
          # Source directory to build documentation from
          source_dir: app
          # Output folder for the generated documentation
          output_dir: docs
          # Recurse into subdirectories when scanning for source files
          recurse: true
          # The path to a JSDoc configuration file
          # config_file: # optional
          # The path to a Markdown file to be used as a the front page
          front_page: README.md
      - run: ls docs
      - name: Git Commit and Push
        uses: github-actions-x/commit@v2.6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ci: commit the generated documentation to /docs"
          # Force add files, useful for adding ignored files.
          force-add: # optional, default is false
          files: docs/*
          name: GitHub Actions
          email: action@github.com 
  release_management:
    # needs: [prepare_docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        if: github.ref == 'refs/heads/master'
      - name: Setting up Node
        uses: actions/setup-node@v1
        if: github.ref == 'refs/heads/master'
        with:
          node-version: '10.15.1'
      - name: Preparing release
        if: github.ref == 'refs/heads/master'
        #--prerelease alpha --skip.tag --release-as 0.2.0
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          pushd ./app
            npx standard-version -a --no-verify --prerelease beta --skip.changelog --skip.tag
            echo ::set-env name=PACKAGE_VERSION::$(node -p -e "require('./package.json').version")
          popd
          npx standard-version -a --no-verify --prerelease beta --skip.tag
        env:
          CI: true
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Push to master
        if: github.ref == 'refs/heads/master'

        uses: ad-m/github-push-action@v0.5.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Merge back to develop
      #   uses: ad-m/github-push-action@v0.5.0
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: develop
  build:
    needs: [release_management]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, ubuntu-18.04]

    # Define the operating system
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup NodeJS 12.x
        uses: actions/setup-node@v1
        if: matrix.os != 'ubuntu-18.04'
        with:
          node-version: '10.15.0'

      - name: Get version numbers from package.json
        id: pkg
        run: |
          appver=$(node -p -e "require('./app/package.json').version")
          pkgver=$(node -p -e "require('./package.json').version")
          echo ::set-output name=version::$appver
          echo ::set-output name=package_version::$pkgver
        shell: bash
      # On Windows server, we have to create the handlebars-directory
      # manually, because the node-process always crashes when it
      # attempts literally the same thing.
      - name: "[Windows] Manually create the handlebars-directory"
        if: matrix.os == 'windows-latest'
        run: New-Item -Path "./source/common/assets" -Name "handlebars" -ItemType "directory" # Hello, PowerShell ._.
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        if: matrix.os != 'ubuntu-18.04'
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache
        id: cache-yarn
        uses: actions/cache@v2.1.1
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-cache-${{ matrix.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: "[All except docker] Set up build environment and compile the assets"
        if: steps.cache-yarn.outputs.cache-hit != 'true' && matrix.os != 'ubuntu-18.04' # all except the docker build
        run: |
          yarn
          pushd app
            yarn
          popd
      - name: "[All except docker] Print Cache dirs"
        if: matrix.os != 'ubuntu-18.04'
        run: |
          pwd
          # ls -f .
          # ls -l ~/work/notorious/notorious/npm_modules
          # ls -l  ~/work/notorious/notorious/app/npm_modules
      # WINDOWS ==============================================================
      - name: "[Windows Build] Build & Publish Windows Installer"
        if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/master'
        run: yarn package-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "[Windows Build] Build Windows Installer"
        if: matrix.os == 'windows-latest' && github.ref != 'refs/heads/master'
        run: yarn package-win-build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # # MACOS ================================================================
      # # - name: Build macOS DMG file
      # #   if: matrix.os == 'macos-latest' # Only if the job runs on macOS
      # #   run: GH_TOKEN=${{ secrets.GITHUB_TOKEN }} APPLE_ID=${{ secrets.APPLE_ID }} APPLE_ID_PASS=${{ secrets.APPLE_ID_PASS }} CSC_LINK=${{ secrets.MACOS_CERT }}  CSC_KEY_PASSWORD=${{ secrets.MACOS_CERT_PASS }} npm run release:mac
      # # - name: Cache macOS release
      # #   if: matrix.os == 'macos-latest' # Only if the job runs on macOS
      # #   uses: actions/upload-artifact@v1
      # #   with:
      # #     name: Notorious-${{ steps.pkg.outputs.version }}.dmg
      # #     path: ./release/Notorious-${{ steps.pkg.outputs.version }}.dmg

      # LINUX ================================================================
      - name: "[Linux Build] Build & Publish Linux installers"
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/master'
        run: GH_TOKEN=${{ secrets.GITHUB_TOKEN }} yarn package-linux
      - name: "[Linux Build] Build Linux installers"
        if: matrix.os == 'ubuntu-latest' && github.ref != 'refs/heads/master'
        run: |
          ls node_modules
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }} yarn package-linux-build


      # LINUX DOCKER ================================================================
      - name: "[Docker Build] Login to DockerHub Registry"
        if: matrix.os == 'ubuntu-18.04'
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: "[Docker Build] Build the tagged Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref == 'refs/heads/master'
        run: docker build . --file Dockerfile.prod --tag danobot/notorious:${{ steps.pkg.outputs.version }} && docker tag danobot/notorious:${{ steps.pkg.outputs.version }} danobot/notorious:latest
      - name: "[Docker Build] Build the tagged Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop'
        run: docker build . --file Dockerfile.prod --tag danobot/notorious:${{ steps.pkg.outputs.version }} && docker tag danobot/notorious:${{ steps.pkg.outputs.version }} danobot/notorious:latest
      - name: "[Docker Build] Push the tagged Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref == 'refs/heads/master'
        run: docker push danobot/notorious:${{ steps.pkg.outputs.version }}

      - name: "[Docker Build Develop] Build the latest Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref == 'refs/heads/develop'
        run: docker build . --file Dockerfile.prod --tag danobot/notorious:next
      - name: "[Docker Build Develop] Push the latest Docker image"
        if: matrix.os == 'ubuntu-18.04' && github.ref == 'refs/heads/develop'
        run: docker push danobot/notorious:next

      # Secure secrets management using GitHub Secrets
      - name: "[Secure Secrets Management] Configure GitHub Secrets"
        run: |
          echo "Configuring GitHub Secrets..."
          echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}"

      # Network segmentation and least privilege access controls
      - name: "[Network Segmentation] Configure Docker network"
        run: |
          echo "Configuring Docker network..."
          docker network create --driver bridge isolated_network
          docker network connect isolated_network notorious_web
          docker network connect isolated_network couchdb

      # Continuous monitoring and logging using Prometheus and Grafana
      - name: "[Monitoring and Logging] Setup Prometheus and Grafana"
        run: |
          echo "Setting up Prometheus and Grafana..."
          docker run -d --name prometheus --network isolated_network prom/prometheus
          docker run -d --name grafana --network isolated_network grafana/grafana
